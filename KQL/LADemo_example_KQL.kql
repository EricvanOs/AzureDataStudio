// use https://aka.ms/lademo


 SecurityEvent 
 | where * contains "Kusto";

 SecurityEvent
 | where TimeGenerated> ago(1d);

 SecurityEvent
 | where TimeGenerated> ago(1h) and EventID== 4624;

 SecurityEvent
 | where TimeGenerated > ago(1h)
 | where EventID == 4624
 | where AccountType =~ "user";

 SecurityEvent 
 | where EventID in (4624, 4625);

 // better
 SecurityEvent
| where TimeGenerated> ago(1d)
| where EventID in (4624, 4625);

 VMConnection 
 | where TimeGenerated> ago(2h)
 | where ipv4_is_match (DestinationIp, "10.0.0.0/8");

 SecurityEvent 
 | where TimeGenerated> ago(2h)
 | where * contains "10.1.5.5";


SecurityEvent 
| where TimeGenerated >= ago(1d) 
| search "Guest";

SecurityEvent
| take 10 
| extend ComputerNameLength = strlen(Computer)
| project Computer,ComputerNameLength;


Perf
|where CounterName == "Free Megabytes"
|where InstanceName == "C:"
|extend FreeKB = CounterValue * 1000
|extend FreeGB = CounterValue / 1000;


SecurityEvent
| where EventID in ( 4624 , 4625 )
| take 10
| extend rgroup = extract("resourcegroups/(.*)/providers",1,_ResourceId)
| project _ResourceId, rgroup;


SecurityEvent
| where EventID in ( 4624 , 4625 )
| take 10
| extend rgroup = split(_ResourceId,"/",4)[0]
| project _ResourceId, rgroup;

SecurityEvent
| where EventID in ( 4624 , 4625 )
| take 10
| parse _ResourceId with "/subscription/" sub "/resourcegroups/" rgroup "/providers" *
| project _ResourceId, rgroup;


let timeframe = 1d;
let DomainList = dynamic(["tor2web.org", "tor2web.com", "torlink.co", "onion.to", "onion.ink", "onion.cab", "onion.nu", "onion.link", 
  "onion.it", "onion.city", "onion.direct", "onion.top", "onion.casa", "onion.plus", "onion.rip", "onion.dog", "tor2web.fi", 
  "tor2web.blutmagie.de", "onion.sh", "onion.lu", "onion.pet", "t2w.pw", "tor2web.ae.org", "tor2web.io", "tor2web.xyz", "onion.lt", 
  "s1.tor-gateways.de", "s2.tor-gateways.de", "s3.tor-gateways.de", "s4.tor-gateways.de", "s5.tor-gateways.de", "hiddenservice.net"]);

// print DomainList 

Syslog  // no results in Syslog
| where TimeGenerated >= ago(timeframe)
| where ProcessName contains "squid"  // look at recommendation
| extend HTTP_Status_Code = extract("(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))/([0-9]{3})",8,SyslogMessage),Domain = extract("(([A-Z]+ [a-z]{4,5}:\\/\\/)|[A-Z]+ )([^ :\\/]*)",3,SyslogMessage)
| where HTTP_Status_Code == "200"
| where Domain contains "."
| where Domain has_any (DomainList);


// Find all Windows logon events starting 2 weeks ago until 1 week ago that occured on a computer with name which starts with "C".
 
SecurityEvent
| where TimeGenerated between (ago(14d) .. ago(7d))
| where EventID == 4624 //"An account was successfully logged on"
| where Computer startswith "C";



SecurityEvent 
| summarize count() by Computer;


WindowsFirewall
| where CommunicationDirection == "SEND" 
| where FirewallAction == "ALLOW"
| summarize dcount(SourceIP);


SecurityEvent
| where TimeGenerated > ago(1h)
| where EventID == 4624
| summarize count() by AccountType, Computer;



// Find how many times each process ran per computer. Hints and guideline: (1) Event 4688 logs process creation; (2) which field represent the processes created and which the computer on which it was ran?

SecurityEvent
| where EventID == 4688 //"A new process has been created"
| summarize count() by NewProcessName, Computer;


SecurityEvent | distinct Computer, Account;
SecurityEvent | where EventID == 4624 | count;
SecurityEvent | where EventID == 4624 | order by Account;
SecurityEvent | top 10 by TimeGenerated desc;


SecurityAlert
| where TimeGenerated > ago(7d) 
| extend severityOrder = case (
    AlertSeverity == "High", 3, 
    AlertSeverity == "Medium", 2, 
    AlertSeverity == "Low", 1, 
    AlertSeverity == "Informational", 0, 
    -1)
| order by severityOrder
| project-reorder  severityOrder;


SecurityEvent
| where TimeGenerated > ago(1d)
| summarize arg_max(TimeGenerated, *) by Computer;


//What is the difference between the following queries?

 SecurityEvent
| summarize arg_max(TimeGenerated, *) by Account 
| where EventID == "4624"
| count

// and 

SecurityEvent
| where EventID == "4624"
| summarize arg_max(TimeGenerated, *) by Account 
| count


// Find how source IPs from which traffic has been dropped on Windows machines more than 10 times in the last 7 days.

//
// Hints and guideline:
// Connections to Windows machines are collected in the "WindowsFirewall"
// What is the name of the field which specifies traffic direction and can help determine inbound connections?
// What is the name of the field which specifies the firewall action and can help identify dropped connections?
//

WindowsFirewall
|where TimeGenerated >= ago(7d)
|where CommunicationDirection == 'RECEIVE'
|where FirewallAction == 'DROP'
|summarize c=count() by SourceIP
|where c>=10 ;


// A real-world example: password spray detection 

let timeframe = 1d;
let threshold = 3;
SigninLogs
| where TimeGenerated >= ago(timeframe) 
| where ResultType == "50057"
| where ResultDescription =~ "User account is disabled. The account has been disabled by an administrator."
| summarize applicationCount = dcount(AppDisplayName) by UserPrincipalName, IPAddress
| where applicationCount >= threshold



SecurityEvent 
| project TimeGenerated, Computer

SecurityEvent 
| project IsImportant = iff(Computer contains "CEO", true, false)


SecurityEvent 
| summarize make_set(Account) by Computer



SecurityEvent
|summarize count() by bin(TimeGenerated, 1h)
|render timechart;


SecurityEvent 
| where TimeGenerated > ago(7d) 
| summarize count() by bin(TimeGenerated, 1d)
| render timechart;

VMConnection
| summarize count() by SourceIp 
| sort by count_ desc 
| render barchart;


// Chart the rate of process creation on all domain controllers.

// Hints and guideline:
//- Process creation is Windows event 4688
//- Domain controller names start with "DC"
//- Create multiple charts by aggregating additional more than one field

SecurityEvent
| where Computer startswith "DC"
| where EventID == "4688"
| summarize count() by Computer, bin(TimeGenerated, 1h) 
| render timechart;


SecurityEvent 
| summarize AdminSuccessfullLogons = countif(Account contains "Admin" and EventID == 4624), 
            AdminFailedLogons = countif(Account contains "Admin" and EventID == 4625);


// Render graph of successful vs failed logons over the last 7days, use alias for the legend ("Success", "Failed")

//Hints and guideline:
//- In the Security Event table, successful logon has eventid 4624, and failed logon event id 4625.
//- Check if aggregation function countif can help.

SecurityEvent 
| summarize Success=countif(EventID == 4624), 
            Failed=countif(EventID == 4625) by bin(TimeGenerated, 1h)
| render timechart;

 
let timeOffset = 7d;
let discardEventId = 4688;
SecurityEvent
| where TimeGenerated > ago(timeOffset*2) and TimeGenerated < ago(timeOffset) 
| where EventID != discardEventId;


let suspiciousAccounts = datatable(account: string) [ 
    @"\administrator",
    @"NT AUTHORITY\SYSTEM"];
SecurityEvent 
| where Account in (suspiciousAccounts);


let LowActivityAccounts = SecurityEvent
|summarize cnt = count() by Account
| where cnt <10;
LowActivityAccounts
| where Account contains "SQL";


let LowActivityAccounts = materialize(
    SecurityEvent
    | summarize cnt = count() by Account | where cnt < 10
    );
LowActivityAccounts
| where Account contains "Sql"
| union (LowActivityAccounts | where Account contains "App");


SecurityEvent
| union (WindowsFirewall | where CommunicationDirection == "RECEIVE");

// Find the ratio of alerts (in the SecurityAlert table) to events (in the SecurityEvent table) broken by day for the last week

SecurityAlert 
| union SecurityEvent 
| summarize SecurityAlerts = countif(Type == "SecurityAlert"), 
            SecurityEvents = countif(Type == "SecurityEvent") by bin (TimeGenerated, 24h)
| extend Ratio = SecurityAlerts * 1.0 / SecurityEvents 
| project SecurityEvents , SecurityAlerts , Ratio;


SecurityEvent
|join (
    SecurityAlert 
    | where AlertSeverity == 'High'
    | extend Account = tostring(parse_json(ExtendedProperties).["User Name"])
    ) on Account;

SecurityAlert
| extend ExtendedProperties = todynamic(ExtendedProperties) 
| extend ActionTaken = ExtendedProperties.ActionTaken
| extend AttackerIP = ExtendedProperties["Attacker IP"];

SecurityAlert
| mv-expand entity = todynamic(Entities)
| project Entities, ['entity']


SecurityAlert
| mv-apply entity = todynamic(Entities) on (
    where entity.Type == "account"
    | extend account = strcat (entity.NTDomain, "\\", entity.Name));


// Show for each account that has alerts, how many alerts and which Security Event types it had in the last 7 days.

// Hints and guideline:
//- Alerts in the SecurityAlert table keeps entities in a JSON array string. What is the name of this field?
//- Account is just one of the possible entity types in the array
//- Make sure that account has the same format in both the alerts and events table.

SecurityAlert
| mv-apply entity=todynamic(Entities) on (
    where entity.Type == "account"
    | extend Account = strcat(entity.NTDomain, "\\", entity.Name))
| summarize dcount(SystemAlertId) by Account
| join kind=leftouter ( SecurityEvent
| summarize make_set(EventID) by Account ) on Account
